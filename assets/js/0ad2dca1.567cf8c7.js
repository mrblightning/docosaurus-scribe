"use strict";(self.webpackChunkscribe=self.webpackChunkscribe||[]).push([[663],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return b}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=u(n),b=o,m=d["".concat(c,".").concat(b)]||d[b]||p[b]||i;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5113:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return u},assets:function(){return l},toc:function(){return p},default:function(){return b}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),s=["components"],a={sidebar_position:2,sidebar_label:"GitHub Actions"},c="GitHub Actions",u={unversionedId:"ci-integration/github-actions",id:"ci-integration/github-actions",title:"GitHub Actions",description:"Before you begin",source:"@site/docs/ci-integration/github-actions.md",sourceDirName:"ci-integration",slug:"/ci-integration/github-actions",permalink:"/docosaurus-scribe/docs/ci-integration/github-actions",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"GitHub Actions"},sidebar:"tutorialSidebar",previous:{title:"Jenkins",permalink:"/docosaurus-scribe/docs/ci-integration/jenkins"},next:{title:"Other CI systems",permalink:"/docosaurus-scribe/docs/ci-integration/general"}},l={},p=[{value:"Before you begin",id:"before-you-begin",level:2},{value:"Gensbom - Creating your SBOM",id:"gensbom---creating-your-sbom",level:2},{value:"Step 1. Add the credentials to GitHub",id:"step-1-add-the-credentials-to-github",level:3},{value:"Step 2. Add Code snippets to Generate your SBOMs",id:"step-2-add-code-snippets-to-generate-your-sboms",level:3}],d={toc:p};function b(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"github-actions"},"GitHub Actions"),(0,i.kt)("h2",{id:"before-you-begin"},"Before you begin"),(0,i.kt)("p",null,"Integrating Scribe Hub with Jenkins requires the following credentials that are found in the product setup dialog (In your ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://prod.hub.scribesecurity.com/",title:"Scribe Hub Link"},"Scribe Hub"))," go to Home>Products>","[$product]",">Setup)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"product key")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"client id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"client secret"))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note that the product key is unique per product, while the client id and secret are unique for your account.")),(0,i.kt)("h2",{id:"gensbom---creating-your-sbom"},"Gensbom - Creating your SBOM"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Gensbom")," is Scribe Hubs' tool used to collect evidence and generate an SBOM."),(0,i.kt)("p",null,"The simplest integration is to automate calling Scribe to collect evidence of the repository and create an SBOM of the final image. The evidence and SBOM are then automatically uploaded to Scribe Hub.\nWhile ",(0,i.kt)("em",{parentName:"p"},"Gensbom")," does have other capabilities and CLI options, we will focus on its' basic usage."),(0,i.kt)("h3",{id:"step-1-add-the-credentials-to-github"},"Step 1. Add the credentials to GitHub"),(0,i.kt)("p",null,"Add the credentials according to the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets/",title:"GitHub Instructions"},"GitHub instructions"),". "),(0,i.kt)("h3",{id:"step-2-add-code-snippets-to-generate-your-sboms"},"Step 2. Add Code snippets to Generate your SBOMs"),(0,i.kt)("p",null,"Call ",(0,i.kt)("em",{parentName:"p"},"gensbom")," from your GitHub flow. Use the\nfollowing example to add the code snippets."),(0,i.kt)("p",null,"The following example workflow builds a mongo express project. In this example, ",(0,i.kt)("em",{parentName:"p"},"gensbom")," is called twice: after checkout and after the docker image is built."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-YAML"},"name: example workflow\n\non: \n  push:\n    tags:\n      - \"*\"\n\njobs:\n  scribe-report-test:\n    runs-on: ubuntu-latest\n    steps:\n\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - uses: actions/checkout@v3\n        with:\n          repository: mongo-express/mongo-express\n          ref: refs/tags/v1.0.0-alpha.4\n          path: mongo-express-scm\n\n      - name: Gensbom Scm generate bom, upload to scribe\n        id: gensbom_bom_scm\n        uses: scribe-security/actions/gensbom/bom@master\n        with:\n           type: dir\n           target: 'mongo-express-scm'\n           verbose: 2\n           scribe-enable: true\n           scribe-client-id: ${{ secrets.clientid }}\n           scribe-client-secret: ${{ secrets.clientsecret }}\n           product-key: ${{ secrets.productkey }}\n\n      # Build and push your image - this example skips this step as we're using the published mongo express.\n      # - name: Build and push remote\n      #   uses: docker/build-push-action@v2\n      #   with:\n      #     context: .\n      #     push: true \n      #     tags: mongo-express:1.0.0-alpha.4\n\n      - name: Gensbom Image generate bom, upload to scribe\n        id: gensbom_bom_image\n        uses: scribe-security/actions/gensbom/bom@master\n        with:\n          type: docker # To be included only if you want to to use docker daemon to access the image (for example, creating your docker image locally)\n           target: 'mongo-express:1.0.0-alpha.4'\n           verbose: 2\n           scribe-enable: true\n           scribe-client-id: ${{ secrets.clientid }}\n           scribe-client-secret: ${{ secrets.clientsecret }}\n           product-key: ${{ secrets.productkey }}\n\n      - uses: actions/upload-artifact@v2\n        with:\n          name: scribe-reports\n          path: |\n            ${{ steps.gensbom_bom_scm.outputs.OUTPUT_PATH }}\n            ${{ steps.gensbom_bom_image.outputs.OUTPUT_PATH }}\n")))}b.isMDXComponent=!0}}]);