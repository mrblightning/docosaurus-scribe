"use strict";(self.webpackChunkscribe=self.webpackChunkscribe||[]).push([[663],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return b}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),b=i,d=m["".concat(c,".").concat(b)]||m[b]||u[b]||o;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5113:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},assets:function(){return p},toc:function(){return u},default:function(){return b}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],s={sidebar_position:1},c="GitHub Actions",l={unversionedId:"ci-integration/github-actions",id:"ci-integration/github-actions",title:"GitHub Actions",description:"Scribe includes 2 elements in this action:",source:"@site/docs/ci-integration/github-actions.md",sourceDirName:"ci-integration",slug:"/ci-integration/github-actions",permalink:"/docosaurus-scribe/docs/ci-integration/github-actions",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"CI Integration",permalink:"/docosaurus-scribe/docs/ci-integration/"},next:{title:"Jenkins",permalink:"/docosaurus-scribe/docs/ci-integration/jenkins"}},p={},u=[{value:"Scribe integrity report - full pipeline",id:"scribe-integrity-report---full-pipeline",level:2}],m={toc:u};function b(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"github-actions"},"GitHub Actions"),(0,o.kt)("p",null,"Scribe includes 2 elements in this action:",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("em",{parentName:"p"},"gensbom")," - the tool creating the ",(0,o.kt)("em",{parentName:"p"},"SBOM")," and\n",(0,o.kt)("em",{parentName:"p"},"valint")," - the tool getting the report."),(0,o.kt)("p",null,"Both tools have other capabilites and CLI option but the simplest integration is to call",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("em",{parentName:"p"},"gensbom")," to create an ",(0,o.kt)("em",{parentName:"p"},"SBOM")," of the repository and the final image and then, call ",(0,o.kt)("em",{parentName:"p"},"valint"),(0,o.kt)("br",{parentName:"p"}),"\n","to get Scribe's integrity report of the result."),(0,o.kt)("p",null,"Use default configuration path ",(0,o.kt)("inlineCode",{parentName:"p"},".gensbom.yaml")," to make sure you have set all the input parameters you need.",(0,o.kt)("br",{parentName:"p"}),"\n","At minimum, you need to set the scribe ",(0,o.kt)("inlineCode",{parentName:"p"},"clientid")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"clientsecret"),".  "),(0,o.kt)("p",null,"These credentials can be copied from your ",(0,o.kt)("a",{href:"https://beta.hub.scribesecurity.com/producer-products"},"CLI page"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"  scribe-clientid: <scribe-client-id>\n    description: 'Scribe client id' \n  scribe-clientsecret: <scribe-access-token>\n    description: 'Scribe access token' \n")),(0,o.kt)("p",null,"Here's usage example for generating an SBOM in GitHub workflow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"- name: Generate cyclonedx json SBOM\n  uses: scribe-security/actions/gensbom/bom@master\n  with:\n    target: '<target_name:tag>'\n    verbose: 2\n")),(0,o.kt)("p",null,"In order to get a valid integrity report you should create 2 ",(0,o.kt)("em",{parentName:"p"},"SBOMs"),", 1 for your repository source code, and 1 for your final image.\nThe created ",(0,o.kt)("em",{parentName:"p"},"SBOMs")," are automatically uploaded to Scribe's backend for integrity analysis."),(0,o.kt)("p",null,"Here's usage example for calling Scribe's report in GitHub workflow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"- name: Valint - download report\n  id: valint_report\n  uses: scribe-security/actions/valint/report@master\n  with:\n      verbose: 2\n      scribe-enable: true\n      scribe-clientid: ${{ inputs.clientid }}\n      scribe-clientsecret: ${{ inputs.clientsecret }}\n")),(0,o.kt)("h2",{id:"scribe-integrity-report---full-pipeline"},"Scribe integrity report - full pipeline"),(0,o.kt)("p",null,"Full workflow example, uploading evidence using gensbom and downloading the report using valint.\nIn this example the final step is to attach the report and evidence to your pipeline run."),(0,o.kt)("p",null,"This example pipeline YAML does a checkout on a docker image, creates an ",(0,o.kt)("em",{parentName:"p"},"SBOM")," for it from the local repository, creates another ",(0,o.kt)("em",{parentName:"p"},"SBOM")," from the docker image and, finally, downloads the integrity report from the Scribe backend. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-YAML"},"name: example workflow\n\non: \n  push:\n    tags:\n      - \"*\"\n\njobs:\n  scribe-report-test:\n    runs-on: ubuntu-latest\n    steps:\n\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - uses: actions/checkout@v3\n        with:\n          repository: mongo-express/mongo-express\n          ref: refs/tags/v1.0.0-alpha.4\n          path: mongo-express-scm\n\n      - name: Gensbom Scm generate bom, upload to scribe\n        id: gensbom_bom_scm\n        uses: scribe-security/actions/gensbom/bom@master\n        with:\n           type: dir\n           target: 'mongo-express-scm'\n           verbose: 2\n           scribe-enable: true\n           scribe-clientid: ${{ secrets.clientid }}\n           scribe-clientsecret: ${{ secrets.clientsecret }}\n           scribe-projectid: ${{ secrets.projectid }}\n\n      - name: Build and push remote\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          push: true\n          tags: mongo-express:1.0.0-alpha.4\n\n      - name: Gensbom Image generate bom, upload to scribe\n        id: gensbom_bom_image\n        uses: scribe-security/actions/gensbom/bom@master\n        with:\n           target: 'mongo-express:1.0.0-alpha.4'\n           verbose: 2\n           scribe-enable: true\n           scribe-clientid: ${{ secrets.clientid }}\n           scribe-clientsecret: ${{ secrets.clientsecret }}\n           scribe-projectid: ${{ secrets.projectid }}\n\n      - name: Valint - download report\n        id: valint_report\n        uses: scribe-security/actions/valint/report@master\n        with:\n           verbose: 2\n           scribe-enable: true\n           scribe-clientid: ${{ secrets.clientid }}\n           scribe-clientsecret: ${{ secrets.clientsecret }}\n           scribe-projectid: ${{ secrets.projectid }}\n\n      - uses: actions/upload-artifact@v2\n        with:\n          name: scribe-reports\n          path: |\n            ${{ steps.gensbom_bom_scm.outputs.OUTPUT_PATH }}\n            ${{ steps.gensbom_bom_image.outputs.OUTPUT_PATH }}\n            ${{ steps.valint_report.outputs.OUTPUT_PATH }}\n")))}b.isMDXComponent=!0}}]);