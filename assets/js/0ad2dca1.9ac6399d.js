"use strict";(self.webpackChunkscribe=self.webpackChunkscribe||[]).push([[663],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,b=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(b,s(s({ref:t},l),{},{components:n})):r.createElement(b,s({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5113:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return p},assets:function(){return l},toc:function(){return u},default:function(){return d}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),s=["components"],a={sidebar_position:2},c="GitHub Actions",p={unversionedId:"ci-integration/github-actions",id:"ci-integration/github-actions",title:"GitHub Actions",description:"This action includes gensbom - the tool creating the SBOM.",source:"@site/docs/ci-integration/github-actions.md",sourceDirName:"ci-integration",slug:"/ci-integration/github-actions",permalink:"/docosaurus-scribe/docs/ci-integration/github-actions",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Jenkins",permalink:"/docosaurus-scribe/docs/ci-integration/jenkins"},next:{title:"Other CI Systems",permalink:"/docosaurus-scribe/docs/ci-integration/general"}},l={},u=[{value:"Creating encrypted secrets for a repository",id:"creating-encrypted-secrets-for-a-repository",level:2},{value:"Scribe <em>SBOM</em> upload - full pipeline example",id:"scribe-sbom-upload---full-pipeline-example",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"github-actions"},"GitHub Actions"),(0,i.kt)("p",null,"This action includes ",(0,i.kt)("em",{parentName:"p"},"gensbom")," - the tool creating the ",(0,i.kt)("em",{parentName:"p"},"SBOM"),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"gensbom")," has other capabilities and CLI options but the simplest integration is to call it to create an ",(0,i.kt)("em",{parentName:"p"},"SBOM")," of the repository and the final image. these ",(0,i.kt)("em",{parentName:"p"},"SBOMs")," are then automatically uploaded to Scribe Hub."),(0,i.kt)("p",null,"In order for the integration to work you must first set the repository specific secrets provided for you at the ",(0,i.kt)("a",{href:"https://beta.hub.scribesecurity.com/producer-products"},"'add project'")," page. Of the provided secrets, ",(0,i.kt)("inlineCode",{parentName:"p"},"clientid")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"clientsecret")," are identical for all your future projects and ",(0,i.kt)("inlineCode",{parentName:"p"},"productkey")," is unique for this particular project only."),(0,i.kt)("h2",{id:"creating-encrypted-secrets-for-a-repository"},"Creating encrypted secrets for a repository"),(0,i.kt)("p",null,"The instructions on how to configure secrets in GitHub can be found in the GitHub documentation ",(0,i.kt)("a",{href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets"},"here"),". For your convenience we present the instructions here as well."),(0,i.kt)("p",null,"To create secrets for a personal account repository, you must be the repository owner. To create secrets for an organization repository, you must have ",(0,i.kt)("inlineCode",{parentName:"p"},"admin")," access."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"On GitHub.com, navigate to the main page of the repository."),(0,i.kt)("li",{parentName:"ol"},"Under your repository name, click ",(0,i.kt)("b",null,"Settings"),". ",(0,i.kt)("img",{src:"../../img/ci/repo-actions-settings.png",alt:"Settings",width:"100%"})),(0,i.kt)("li",{parentName:"ol"},"In the left sidebar, click ",(0,i.kt)("b",null,"Secrets"),"."),(0,i.kt)("li",{parentName:"ol"},"Click ",(0,i.kt)("b",null,"New repository secret"),"."),(0,i.kt)("li",{parentName:"ol"},"Type a name for your secret in the ",(0,i.kt)("b",null,"Name")," input box."),(0,i.kt)("li",{parentName:"ol"},"Enter the value for your secret."),(0,i.kt)("li",{parentName:"ol"},"Click ",(0,i.kt)("b",null,"Add secret"),".")),(0,i.kt)("p",null,"If your repository has environment secrets or can access secrets from the parent organization, then those secrets are also listed on this page."),(0,i.kt)("h2",{id:"scribe-sbom-upload---full-pipeline-example"},"Scribe ",(0,i.kt)("em",{parentName:"h2"},"SBOM")," upload - full pipeline example"),(0,i.kt)("p",null,"This is a full workflow example, connecting your pipeline to Scribe Hub and uploading evidence using ",(0,i.kt)("em",{parentName:"p"},"gensbom"),"."),(0,i.kt)("p",null,"This example pipeline YAML does a checkout on a docker image, creates an ",(0,i.kt)("em",{parentName:"p"},"SBOM")," for it from the local repository, and creates another ",(0,i.kt)("em",{parentName:"p"},"SBOM")," from the docker image. In this example the project used is ",(0,i.kt)("inlineCode",{parentName:"p"},"mongo-express"),".  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-YAML"},"name: example workflow\n\non: \n  push:\n    tags:\n      - \"*\"\n\njobs:\n  scribe-report-test:\n    runs-on: ubuntu-latest\n    steps:\n\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - uses: actions/checkout@v3\n        with:\n          repository: mongo-express/mongo-express\n          ref: refs/tags/v1.0.0-alpha.4\n          path: mongo-express-scm\n\n      - name: Gensbom Scm generate bom, upload to scribe\n        id: gensbom_bom_scm\n        uses: scribe-security/actions/gensbom/bom@master\n        with:\n           type: dir\n           target: 'mongo-express-scm'\n           verbose: 2\n           scribe-enable: true\n           scribe-clientid: ${{ secrets.clientid }}\n           scribe-clientsecret: ${{ secrets.clientsecret }}\n           scribe-productkey: ${{ secrets.productkey }}\n\n      - name: Build and push remote\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          push: true\n          tags: mongo-express:1.0.0-alpha.4\n\n      - name: Gensbom Image generate bom, upload to scribe\n        id: gensbom_bom_image\n        uses: scribe-security/actions/gensbom/bom@master\n        with:\n           target: 'mongo-express:1.0.0-alpha.4'\n           verbose: 2\n           scribe-enable: true\n           scribe-clientid: ${{ secrets.clientid }}\n           scribe-clientsecret: ${{ secrets.clientsecret }}\n           scribe-productkey: ${{ secrets.productkey }}\n\n      - uses: actions/upload-artifact@v2\n        with:\n          name: scribe-reports\n          path: |\n            ${{ steps.gensbom_bom_scm.outputs.OUTPUT_PATH }}\n            ${{ steps.gensbom_bom_image.outputs.OUTPUT_PATH }}\n            ${{ steps.valint_report.outputs.OUTPUT_PATH }}\n")))}d.isMDXComponent=!0}}]);