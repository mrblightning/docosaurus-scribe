"use strict";(self.webpackChunkscribe=self.webpackChunkscribe||[]).push([[48],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=i,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(g,a(a({ref:n},u),{},{components:t})):r.createElement(g,a({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6858:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},assets:function(){return u},toc:function(){return p},default:function(){return m}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],s={sidebar_position:1,sidebar_label:"Jenkins"},c="Integrating Scribe in your Jenkins pipeline",l={unversionedId:"ci-integration/jenkins",id:"ci-integration/jenkins",title:"Integrating Scribe in your Jenkins pipeline",description:"Before you begin",source:"@site/docs/ci-integration/jenkins.md",sourceDirName:"ci-integration",slug:"/ci-integration/jenkins",permalink:"/docosaurus-scribe/docs/ci-integration/jenkins",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Jenkins"},sidebar:"tutorialSidebar",previous:{title:"Setting up Scribe protection in your CI pipeline",permalink:"/docosaurus-scribe/docs/ci-integration/"},next:{title:"GitHub Actions",permalink:"/docosaurus-scribe/docs/ci-integration/github-actions"}},u={},p=[{value:"Before you begin",id:"before-you-begin",level:2},{value:"Procedure",id:"procedure",level:2}],d={toc:p};function m(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"integrating-scribe-in-your-jenkins-pipeline"},"Integrating Scribe in your Jenkins pipeline"),(0,o.kt)("h2",{id:"before-you-begin"},"Before you begin"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This procedure is supported only for Jenkins over Kubernetes.")),(0,o.kt)("p",null,"Integrating Scribe Hub with Jenkins requires the following credentials that are found in the product setup dialog (In your ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://prod.hub.scribesecurity.com/",title:"Scribe Hub Link"},"Scribe Hub"))," go to Home>Products>","[$product]",">Setup)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"product key")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"client id")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"client secret"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note that the product key is unique per product, while the client id and secret are unique for your account.")),(0,o.kt)("h2",{id:"procedure"},"Procedure"),(0,o.kt)("p",null,"Every integration pipeline is unique.\nIntegrating Scribe code to your pipeline varies from one case to another."),(0,o.kt)("p",null,"The following is an example that illustrates where to add Scribe code snippets. "),(0,o.kt)("p",null,"This example uses a sample pipeline building a Mongo express project. "),(0,o.kt)("p",null,"The code snippets call ",(0,o.kt)("inlineCode",{parentName:"p"},"gensbom"),", the evidence collector and SBOM generator developed by Scribe, twice: at checkout and after creating the Docker image."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Add the credentials to your environment according to the ",(0,o.kt)("a",{parentName:"li",href:"https://www.jenkins.io/doc/book/using/using-credentials/",title:"Jenkins Instructions"},"Jenkins instructions"),"."),(0,o.kt)("li",{parentName:"ol"},"Add Code snippets to your pipeline:   ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Add ",(0,o.kt)("inlineCode",{parentName:"li"},"gensbom")," declarations to the container definitions."),(0,o.kt)("li",{parentName:"ul"},"Replace the ",(0,o.kt)("inlineCode",{parentName:"li"},"Mongo express")," repo in the example with your repo name."),(0,o.kt)("li",{parentName:"ul"},"Call ",(0,o.kt)("inlineCode",{parentName:"li"},"gensbom")," right after checkout to collect hash value evidence of the source code files."),(0,o.kt)("li",{parentName:"ul"},"Call ",(0,o.kt)("inlineCode",{parentName:"li"},"gensbom")," to generate an SBOM from the final Docker image.\n")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"pipeline {\n    agent {\n        kubernetes {\n            metadata:\n              labels:\n                some-label: jsl-scribe-test\n            spec:\n              containers:\n              - name: jnlp\n                env:\n                - name: CONTAINER_ENV_VAR\n                  value: jnlp\n              - name: gensbom\n                // taking the image from scribesecuriy means you don't need to have a local version\n                image: scribesecuriy.jfrog.io/scribe-docker-public-local/gensbom:latest \n                command:\n                - cat\n                tty: true\n                command:\n                - cat\n                tty: true\n              - name: git\n                image: alpine/git\n                command:\n                  - cat\n                tty: true\n        }\n    }\n    stages {\n        stage('checkout-bom') {\n            steps {\n                container('git') {\n                    // this is an example of the repository this pipeline is running on. replace with your own repository\n                    sh 'git clone -b v1.0.0-alpha.4 --single-branch https://github.com/mongo-express/mongo-express.git mongo-express-scm'\n                }\n                // The following call to gensbom collects hash value evidence of the source code files to facilitate the integrity validation\n                container('gensbom') {\n                    withCredentials([usernamePassword(credentialsId: 'scribe-staging-auth-id', usernameVariable: 'SCRIBE_CLIENT_ID', passwordVariable: 'SCRIBE_CLIENT_SECRET', productkeyVariable: 'SCRIBE_PRODUCT_KEY')]) {\n                        sh '''\n                        gensbom dir:mongo-express-scm \\\n                            --context-type jenkins \\\n                            --output-directory ./scribe/gensbom \\ \n                            -E -U $SCRIBE_CLIENT_ID -P $SCRIBE_CLIENT_SECRET \\\n                            --product-key $SCRIBE_PRODUCT_KEY \\\n                            -v '''\n                    }\n                }\n            }\n        }\n\n        stage('image-bom') {\n            steps {\n                // The following call to gensbom generates an SBOM from the docker image\n                container('gensbom') {\n                    withCredentials([usernamePassword(credentialsId: 'scribe-staging-auth-id', usernameVariable: 'SCRIBE_CLIENT_ID', passwordVariable: 'SCRIBE_CLIENT_SECRET', productkeyVariable: 'SCRIBE_PRODUCT_KEY')]) {\n                        sh '''\n                        gensbom mongo-express:1.0.0-alpha.4 \\\n                            --context-type jenkins \\\n                            --output-directory ./scribe/gensbom \\ \n                            -E -U $SCRIBE_CLIENT_ID -P $SCRIBE_CLIENT_SECRET \\\n                            --product-key $SCRIBE_PRODUCT_KEY \\\n                            -v '''\n                    }\n                }\n            }\n        }\n    }\n}\n")))}m.isMDXComponent=!0}}]);